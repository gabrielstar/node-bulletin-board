parameters:
  mode: jmeter

steps:
  - ${{ if not(eq(parameters.mode,'tests')) }}:
    - task: AzureCLI@2
      displayName: Create dedicated nodepool
      inputs:
        azureSubscription: $(armServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |

           nodepool_name=crux$(Build.BuildID)
           cluster_name=k8

           if [ -z "$(cname)" ]; then
            echo ""
           else
            cluster_name="$(cname)"
           fi

           resource_group=jmeter-group
           node_count=$(($(scale_up_replicas)+1)) # + 1 for the master
           node_size=Standard_D2_v2

           active_crux_pools=$(az aks nodepool list -g "$resource_group" --cluster-name "$cluster_name" -o json --query [?nodeLabels].{n:nodeLabels} | grep crux.usage | wc -l)

           echo "active crux pools: $active_crux_pools"

           echo "Create dedicated pool on $cluster_name - $nodepool_name with $node_count nodes sized as $node_size"
           echo "az aks nodepool add --resource-group $resource_group --cluster-name $cluster_name  --name $nodepool_name --node-count $node_count --node-vm-size $node_size --labels crux.usage=jmeter"
           az aks nodepool add --resource-group "$resource_group" --cluster-name "$cluster_name"  --name "$nodepool_name" --node-count "$node_count" --node-vm-size "$node_size" --labels crux.usage=jmeter

           echo "Available pools: "
           az aks nodepool list -g "$resource_group" --cluster-name "$cluster_name" --output table
           echo "-----------------------"
           if az aks nodepool list -g "$resource_group" --cluster-name "$cluster_name" --output table | grep "$nodepool_name" ; then
              echo "##[info] Pool has been created usccessfully."
           else
              echo "##[error] Pool has not been successfully created. Lacking capacity?"
              echo "##vso[task.complete result=Failed;]DONE"
           fi

